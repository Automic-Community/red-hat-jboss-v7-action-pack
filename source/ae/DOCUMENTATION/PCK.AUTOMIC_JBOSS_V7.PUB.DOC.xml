<?xml version="1.0" encoding="ISO-8859-15" standalone="no"?><uc-export clientvers="11.0.0">
<DOCU name="PCK.AUTOMIC_JBOSS_V7.PUB.DOC">
<HEADER state="1">
<Title/>
<ArchiveKey1/>
<ArchiveKey2/>
<OH_SubType/>
</HEADER>
<DOCU_Docu state="1" type="text">
<DOC><![CDATA[Manage your application deployments to a JBoss application server using these actions


=Rollback=

The JBoss actions support rollback. The rollbacks are implemented as follows:

* CREATE_MQT: first the original state is backed up. The rollback restores the original state. If the Message Queue/Topic has not existed before, it will not exist after the rollback. It the Message Queue/Topic existed before, it is intouched by the rollback.

* CREATE_TX_DATASOURCE: first the original state is backed up. The rollback restores the original state. If the TX datasource has not existed before, it will not exist after the rollback. It the TX datasource existed before, it is intouched by the rollback.

* CREATE_XA_DATASOURCE: first the original state is backed up. The rollback restores the original state. If the XA datasource has not existed before, it will not exist after the rollback. It the XA datasource existed before, it is intouched by the rollback.

* DELETE_DATASOURCE: Before deleting the datasource,  a backup of the datasource <JNDI NAME>-ds.xml is created. In case of rollback the <JNDI NAME>-ds.xml file is
redeployed.

* DELETE_MQT: Before deleting the Message Queue/Topic, a backup of the Message Queue/Topic <JNDI NAME>-ds.xml is created. In case of rollback the <JNDI NAME>-ds.xml file is redeployed.

* DEPLOY_APPLICATION: first the original state is backed up. The rollback restores the original state. If the application was not deployed before, it will not exist after the rollback. It the application was deployed before, it is intouched by the rollback.

* DEPLOY_FILE: Before executing the roll forward function, the file is backed up. In case of a rollback, the file is redeployed to the application server.

* START_APPLICATION: Before executing the roll forward function, the information is stored if the application has been running before. The rollback function restores the original application state. 

* STOP_APPLICATION: Before executing the roll forward function, the information is stored if the application has been running before. The rollback function restores the original application state. 

* START SERVER: Before executing the roll forward function, the information is stored if the server has been running before. The rollback function restores the original server state. 

* STOP_SERVER: Before executing the roll forward function, the information is stored if the server has been running before. The rollback function restores the original server state. 

* UNDEPLOY_APPLICATION: Prior undeploying the application, a backup operation finds out the directory where the war/ear/sar/.. file was deployed originally. It creates a backup of the folder for the case a rollback is necessery. In case of a rollback the backed up folder is deployed again.

* UNDEPLOY_FILE: Prior executing the roll forward operation, the file is backed up. In case of a rollback, the file is redeployed again.
]]></DOC>
</DOCU_Docu>
</DOCU>
</uc-export>